// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ExtensionUpdated extends ethereum.Event {
  get params(): ExtensionUpdated__Params {
    return new ExtensionUpdated__Params(this);
  }
}

export class ExtensionUpdated__Params {
  _event: ExtensionUpdated;

  constructor(event: ExtensionUpdated) {
    this._event = event;
  }

  get selector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldExtension(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newExtension(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class GuardUpdated extends ethereum.Event {
  get params(): GuardUpdated__Params {
    return new GuardUpdated__Params(this);
  }
}

export class GuardUpdated__Params {
  _event: GuardUpdated;

  constructor(event: GuardUpdated) {
    this._event = event;
  }

  get operation(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldGuard(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newGuard(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }
}

export class InterfaceAdded extends ethereum.Event {
  get params(): InterfaceAdded__Params {
    return new InterfaceAdded__Params(this);
  }
}

export class InterfaceAdded__Params {
  _event: InterfaceAdded;

  constructor(event: InterfaceAdded) {
    this._event = event;
  }

  get interfaceId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class InterfaceRemoved extends ethereum.Event {
  get params(): InterfaceRemoved__Params {
    return new InterfaceRemoved__Params(this);
  }
}

export class InterfaceRemoved__Params {
  _event: InterfaceRemoved;

  constructor(event: InterfaceRemoved) {
    this._event = event;
  }

  get interfaceId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class NameUpdated extends ethereum.Event {
  get params(): NameUpdated__Params {
    return new NameUpdated__Params(this);
  }
}

export class NameUpdated__Params {
  _event: NameUpdated;

  constructor(event: NameUpdated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PermissionAdded extends ethereum.Event {
  get params(): PermissionAdded__Params {
    return new PermissionAdded__Params(this);
  }
}

export class PermissionAdded__Params {
  _event: PermissionAdded;

  constructor(event: PermissionAdded) {
    this._event = event;
  }

  get operation(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PermissionRemoved extends ethereum.Event {
  get params(): PermissionRemoved__Params {
    return new PermissionRemoved__Params(this);
  }
}

export class PermissionRemoved__Params {
  _event: PermissionRemoved;

  constructor(event: PermissionRemoved) {
    this._event = event;
  }

  get operation(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SymbolUpdated extends ethereum.Event {
  get params(): SymbolUpdated__Params {
    return new SymbolUpdated__Params(this);
  }
}

export class SymbolUpdated__Params {
  _event: SymbolUpdated;

  constructor(event: SymbolUpdated) {
    this._event = event;
  }

  get symbol(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TraitRegistered extends ethereum.Event {
  get params(): TraitRegistered__Params {
    return new TraitRegistered__Params(this);
  }
}

export class TraitRegistered__Params {
  _event: TraitRegistered;

  constructor(event: TraitRegistered) {
    this._event = event;
  }

  get traitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rleBytes(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ERC1155Rails__checkGuardBeforeResult {
  value0: Address;
  value1: Bytes;

  constructor(value0: Address, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getGuard(): Address {
    return this.value0;
  }

  getCheckBeforeData(): Bytes {
    return this.value1;
  }
}

export class ERC1155Rails__getAllExtensionsResultExtensionsStruct extends ethereum.Tuple {
  get selector(): Bytes {
    return this[0].toBytes();
  }

  get implementation(): Address {
    return this[1].toAddress();
  }

  get updatedAt(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): string {
    return this[3].toString();
  }
}

export class ERC1155Rails__getAllGuardsResultGuardsStruct extends ethereum.Tuple {
  get operation(): Bytes {
    return this[0].toBytes();
  }

  get implementation(): Address {
    return this[1].toAddress();
  }

  get updatedAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class ERC1155Rails__getAllPermissionsResultPermissionsStruct extends ethereum.Tuple {
  get operation(): Bytes {
    return this[0].toBytes();
  }

  get account(): Address {
    return this[1].toAddress();
  }

  get updatedAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class ERC1155Rails extends ethereum.SmartContract {
  static bind(address: Address): ERC1155Rails {
    return new ERC1155Rails("ERC1155Rails", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkGuardBefore(
    operation: Bytes,
    data: Bytes
  ): ERC1155Rails__checkGuardBeforeResult {
    let result = super.call(
      "checkGuardBefore",
      "checkGuardBefore(bytes8,bytes):(address,bytes)",
      [ethereum.Value.fromFixedBytes(operation), ethereum.Value.fromBytes(data)]
    );

    return new ERC1155Rails__checkGuardBeforeResult(
      result[0].toAddress(),
      result[1].toBytes()
    );
  }

  try_checkGuardBefore(
    operation: Bytes,
    data: Bytes
  ): ethereum.CallResult<ERC1155Rails__checkGuardBeforeResult> {
    let result = super.tryCall(
      "checkGuardBefore",
      "checkGuardBefore(bytes8,bytes):(address,bytes)",
      [ethereum.Value.fromFixedBytes(operation), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC1155Rails__checkGuardBeforeResult(
        value[0].toAddress(),
        value[1].toBytes()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  erc165Id(): Bytes {
    let result = super.call("erc165Id", "erc165Id():(bytes4)", []);

    return result[0].toBytes();
  }

  try_erc165Id(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("erc165Id", "erc165Id():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  execute(to: Address, value: BigInt, data: Bytes): Bytes {
    let result = super.call(
      "execute",
      "execute(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_execute(
    to: Address,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "execute",
      "execute(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  executeCall(to: Address, value: BigInt, data: Bytes): Bytes {
    let result = super.call(
      "executeCall",
      "executeCall(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_executeCall(
    to: Address,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "executeCall",
      "executeCall(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  extensionOf(selector: Bytes): Address {
    let result = super.call("extensionOf", "extensionOf(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toAddress();
  }

  try_extensionOf(selector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("extensionOf", "extensionOf(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllExtensions(): Array<
    ERC1155Rails__getAllExtensionsResultExtensionsStruct
  > {
    let result = super.call(
      "getAllExtensions",
      "getAllExtensions():((bytes4,address,uint40,string)[])",
      []
    );

    return result[0].toTupleArray<
      ERC1155Rails__getAllExtensionsResultExtensionsStruct
    >();
  }

  try_getAllExtensions(): ethereum.CallResult<
    Array<ERC1155Rails__getAllExtensionsResultExtensionsStruct>
  > {
    let result = super.tryCall(
      "getAllExtensions",
      "getAllExtensions():((bytes4,address,uint40,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        ERC1155Rails__getAllExtensionsResultExtensionsStruct
      >()
    );
  }

  getAllGuards(): Array<ERC1155Rails__getAllGuardsResultGuardsStruct> {
    let result = super.call(
      "getAllGuards",
      "getAllGuards():((bytes8,address,uint40)[])",
      []
    );

    return result[0].toTupleArray<
      ERC1155Rails__getAllGuardsResultGuardsStruct
    >();
  }

  try_getAllGuards(): ethereum.CallResult<
    Array<ERC1155Rails__getAllGuardsResultGuardsStruct>
  > {
    let result = super.tryCall(
      "getAllGuards",
      "getAllGuards():((bytes8,address,uint40)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ERC1155Rails__getAllGuardsResultGuardsStruct>()
    );
  }

  getAllPermissions(): Array<
    ERC1155Rails__getAllPermissionsResultPermissionsStruct
  > {
    let result = super.call(
      "getAllPermissions",
      "getAllPermissions():((bytes8,address,uint40)[])",
      []
    );

    return result[0].toTupleArray<
      ERC1155Rails__getAllPermissionsResultPermissionsStruct
    >();
  }

  try_getAllPermissions(): ethereum.CallResult<
    Array<ERC1155Rails__getAllPermissionsResultPermissionsStruct>
  > {
    let result = super.tryCall(
      "getAllPermissions",
      "getAllPermissions():((bytes8,address,uint40)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        ERC1155Rails__getAllPermissionsResultPermissionsStruct
      >()
    );
  }

  guardOf(operation: Bytes): Address {
    let result = super.call("guardOf", "guardOf(bytes8):(address)", [
      ethereum.Value.fromFixedBytes(operation)
    ]);

    return result[0].toAddress();
  }

  try_guardOf(operation: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("guardOf", "guardOf(bytes8):(address)", [
      ethereum.Value.fromFixedBytes(operation)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasExtended(selector: Bytes): boolean {
    let result = super.call("hasExtended", "hasExtended(bytes4):(bool)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBoolean();
  }

  try_hasExtended(selector: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasExtended", "hasExtended(bytes4):(bool)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasPermission(operation: Bytes, account: Address): boolean {
    let result = super.call(
      "hasPermission",
      "hasPermission(bytes8,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(operation),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasPermission(
    operation: Bytes,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPermission",
      "hasPermission(bytes8,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(operation),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashOperation(name: string): Bytes {
    let result = super.call("hashOperation", "hashOperation(string):(bytes8)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBytes();
  }

  try_hashOperation(name: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOperation",
      "hashOperation(string):(bytes8)",
      [ethereum.Value.fromString(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ext_getImageDataForTrait(traitId: BigInt): Bytes {
    let result = super.call(
      "ext_getImageDataForTrait",
      "ext_getImageDataForTrait(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(traitId)]
    );

    return result[0].toBytes();
  }

  try_ext_getImageDataForTrait(traitId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ext_getImageDataForTrait",
      "ext_getImageDataForTrait(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(traitId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllSelectors(): Array<Bytes> {
    let result = super.call(
      "getAllSelectors",
      "getAllSelectors():(bytes4[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getAllSelectors(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllSelectors",
      "getAllSelectors():(bytes4[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAllSignatures(): Array<string> {
    let result = super.call(
      "getAllSignatures",
      "getAllSignatures():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_getAllSignatures(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getAllSignatures",
      "getAllSignatures():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  signatureOf(selector: Bytes): string {
    let result = super.call("signatureOf", "signatureOf(bytes4):(string)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toString();
  }

  try_signatureOf(selector: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("signatureOf", "signatureOf(bytes4):(string)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddInterfaceCall extends ethereum.Call {
  get inputs(): AddInterfaceCall__Inputs {
    return new AddInterfaceCall__Inputs(this);
  }

  get outputs(): AddInterfaceCall__Outputs {
    return new AddInterfaceCall__Outputs(this);
  }
}

export class AddInterfaceCall__Inputs {
  _call: AddInterfaceCall;

  constructor(call: AddInterfaceCall) {
    this._call = call;
  }

  get interfaceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddInterfaceCall__Outputs {
  _call: AddInterfaceCall;

  constructor(call: AddInterfaceCall) {
    this._call = call;
  }
}

export class AddPermissionCall extends ethereum.Call {
  get inputs(): AddPermissionCall__Inputs {
    return new AddPermissionCall__Inputs(this);
  }

  get outputs(): AddPermissionCall__Outputs {
    return new AddPermissionCall__Outputs(this);
  }
}

export class AddPermissionCall__Inputs {
  _call: AddPermissionCall;

  constructor(call: AddPermissionCall) {
    this._call = call;
  }

  get operation(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddPermissionCall__Outputs {
  _call: AddPermissionCall;

  constructor(call: AddPermissionCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get executeData(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteCallCall extends ethereum.Call {
  get inputs(): ExecuteCallCall__Inputs {
    return new ExecuteCallCall__Inputs(this);
  }

  get outputs(): ExecuteCallCall__Outputs {
    return new ExecuteCallCall__Outputs(this);
  }
}

export class ExecuteCallCall__Inputs {
  _call: ExecuteCallCall;

  constructor(call: ExecuteCallCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteCallCall__Outputs {
  _call: ExecuteCallCall;

  constructor(call: ExecuteCallCall) {
    this._call = call;
  }

  get executeData(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get initData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RemoveExtensionCall extends ethereum.Call {
  get inputs(): RemoveExtensionCall__Inputs {
    return new RemoveExtensionCall__Inputs(this);
  }

  get outputs(): RemoveExtensionCall__Outputs {
    return new RemoveExtensionCall__Outputs(this);
  }
}

export class RemoveExtensionCall__Inputs {
  _call: RemoveExtensionCall;

  constructor(call: RemoveExtensionCall) {
    this._call = call;
  }

  get selector(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveExtensionCall__Outputs {
  _call: RemoveExtensionCall;

  constructor(call: RemoveExtensionCall) {
    this._call = call;
  }
}

export class RemoveGuardCall extends ethereum.Call {
  get inputs(): RemoveGuardCall__Inputs {
    return new RemoveGuardCall__Inputs(this);
  }

  get outputs(): RemoveGuardCall__Outputs {
    return new RemoveGuardCall__Outputs(this);
  }
}

export class RemoveGuardCall__Inputs {
  _call: RemoveGuardCall;

  constructor(call: RemoveGuardCall) {
    this._call = call;
  }

  get operation(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveGuardCall__Outputs {
  _call: RemoveGuardCall;

  constructor(call: RemoveGuardCall) {
    this._call = call;
  }
}

export class RemoveInterfaceCall extends ethereum.Call {
  get inputs(): RemoveInterfaceCall__Inputs {
    return new RemoveInterfaceCall__Inputs(this);
  }

  get outputs(): RemoveInterfaceCall__Outputs {
    return new RemoveInterfaceCall__Outputs(this);
  }
}

export class RemoveInterfaceCall__Inputs {
  _call: RemoveInterfaceCall;

  constructor(call: RemoveInterfaceCall) {
    this._call = call;
  }

  get interfaceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveInterfaceCall__Outputs {
  _call: RemoveInterfaceCall;

  constructor(call: RemoveInterfaceCall) {
    this._call = call;
  }
}

export class RemovePermissionCall extends ethereum.Call {
  get inputs(): RemovePermissionCall__Inputs {
    return new RemovePermissionCall__Inputs(this);
  }

  get outputs(): RemovePermissionCall__Outputs {
    return new RemovePermissionCall__Outputs(this);
  }
}

export class RemovePermissionCall__Inputs {
  _call: RemovePermissionCall;

  constructor(call: RemovePermissionCall) {
    this._call = call;
  }

  get operation(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemovePermissionCall__Outputs {
  _call: RemovePermissionCall;

  constructor(call: RemovePermissionCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetExtensionCall extends ethereum.Call {
  get inputs(): SetExtensionCall__Inputs {
    return new SetExtensionCall__Inputs(this);
  }

  get outputs(): SetExtensionCall__Outputs {
    return new SetExtensionCall__Outputs(this);
  }
}

export class SetExtensionCall__Inputs {
  _call: SetExtensionCall;

  constructor(call: SetExtensionCall) {
    this._call = call;
  }

  get selector(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetExtensionCall__Outputs {
  _call: SetExtensionCall;

  constructor(call: SetExtensionCall) {
    this._call = call;
  }
}

export class SetGuardCall extends ethereum.Call {
  get inputs(): SetGuardCall__Inputs {
    return new SetGuardCall__Inputs(this);
  }

  get outputs(): SetGuardCall__Outputs {
    return new SetGuardCall__Outputs(this);
  }
}

export class SetGuardCall__Inputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }

  get operation(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetGuardCall__Outputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetSymbolCall extends ethereum.Call {
  get inputs(): SetSymbolCall__Inputs {
    return new SetSymbolCall__Inputs(this);
  }

  get outputs(): SetSymbolCall__Outputs {
    return new SetSymbolCall__Outputs(this);
  }
}

export class SetSymbolCall__Inputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }

  get symbol_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSymbolCall__Outputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class Constructor1Call extends ethereum.Call {
  get inputs(): Constructor1Call__Inputs {
    return new Constructor1Call__Inputs(this);
  }

  get outputs(): Constructor1Call__Outputs {
    return new Constructor1Call__Outputs(this);
  }
}

export class Constructor1Call__Inputs {
  _call: Constructor1Call;

  constructor(call: Constructor1Call) {
    this._call = call;
  }
}

export class Constructor1Call__Outputs {
  _call: Constructor1Call;

  constructor(call: Constructor1Call) {
    this._call = call;
  }
}

export class Ext_registerTraitCall extends ethereum.Call {
  get inputs(): Ext_registerTraitCall__Inputs {
    return new Ext_registerTraitCall__Inputs(this);
  }

  get outputs(): Ext_registerTraitCall__Outputs {
    return new Ext_registerTraitCall__Outputs(this);
  }
}

export class Ext_registerTraitCall__Inputs {
  _call: Ext_registerTraitCall;

  constructor(call: Ext_registerTraitCall) {
    this._call = call;
  }

  get rleBytes(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class Ext_registerTraitCall__Outputs {
  _call: Ext_registerTraitCall;

  constructor(call: Ext_registerTraitCall) {
    this._call = call;
  }
}
