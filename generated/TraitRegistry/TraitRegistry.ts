// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TraitRegistered extends ethereum.Event {
  get params(): TraitRegistered__Params {
    return new TraitRegistered__Params(this);
  }
}

export class TraitRegistered__Params {
  _event: TraitRegistered;

  constructor(event: TraitRegistered) {
    this._event = event;
  }

  get traitId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rleBytes(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TraitRegistry extends ethereum.SmartContract {
  static bind(address: Address): TraitRegistry {
    return new TraitRegistry("TraitRegistry", address);
  }

  ext_getImageDataForTrait(traitId: BigInt): Bytes {
    let result = super.call(
      "ext_getImageDataForTrait",
      "ext_getImageDataForTrait(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(traitId)]
    );

    return result[0].toBytes();
  }

  try_ext_getImageDataForTrait(traitId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ext_getImageDataForTrait",
      "ext_getImageDataForTrait(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(traitId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllSelectors(): Array<Bytes> {
    let result = super.call(
      "getAllSelectors",
      "getAllSelectors():(bytes4[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getAllSelectors(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllSelectors",
      "getAllSelectors():(bytes4[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAllSignatures(): Array<string> {
    let result = super.call(
      "getAllSignatures",
      "getAllSignatures():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_getAllSignatures(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getAllSignatures",
      "getAllSignatures():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  signatureOf(selector: Bytes): string {
    let result = super.call("signatureOf", "signatureOf(bytes4):(string)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toString();
  }

  try_signatureOf(selector: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("signatureOf", "signatureOf(bytes4):(string)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Ext_registerTraitCall extends ethereum.Call {
  get inputs(): Ext_registerTraitCall__Inputs {
    return new Ext_registerTraitCall__Inputs(this);
  }

  get outputs(): Ext_registerTraitCall__Outputs {
    return new Ext_registerTraitCall__Outputs(this);
  }
}

export class Ext_registerTraitCall__Inputs {
  _call: Ext_registerTraitCall;

  constructor(call: Ext_registerTraitCall) {
    this._call = call;
  }

  get rleBytes(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class Ext_registerTraitCall__Outputs {
  _call: Ext_registerTraitCall;

  constructor(call: Ext_registerTraitCall) {
    this._call = call;
  }
}
